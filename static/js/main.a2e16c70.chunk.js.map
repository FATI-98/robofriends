{"version":3,"sources":["components/Card.js","components/Cardlist.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","robots","map","user","i","key","App","onSearchChange","event","setState","searchfield","target","value","state","date","Date","fetch","then","response","json","users","this","filteredrobot","filter","robot","toLowerCase","includes","length","type","placeholder","onChange","toLocaleTimeString","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oOAkBeA,EAfH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAElB,OAEI,yBAAKC,UAAU,+DACX,yBAAKC,IAAI,SAAUC,IAAG,+BAA0BL,KAChD,6BACI,wBAAIG,UAAU,MAAd,IAAqBF,EAArB,KACA,uBAAGE,UAAU,MAAMD,EAAnB,QCQDI,EAhBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACd,OACMA,EAAOC,KAAK,SAACC,EAAKC,GAChB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,YCiEdU,G,wDAnEb,aAAe,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SAnB5B,EAAKC,MAAQ,CACXZ,OAAQ,GACRS,YAAa,GACbI,KAAK,IAAIC,MALC,E,gEAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKX,SAAS,CACZR,OAAQmB,S,+BAaN,IAAD,EAIHC,KAAKR,MAFPZ,EAFK,EAELA,OACAS,EAHK,EAGLA,YAEIY,EAAgBrB,EAAOsB,QAAO,SAAAC,GAClC,OAAOA,EAAM7B,KAAK8B,cAAcC,SAAShB,EAAYe,kBAEvD,OAAQxB,EAAO0B,OAGV,yBAAM9B,UAAY,MACjB,wBAAIA,UAAY,0BAAhB,iBACA,yBAAKA,UAAY,WACjB,2BAAOA,UAAY,mDACnB+B,KAAO,SACPC,YAAc,gBACdC,SAAYT,KAAKd,kBAGjB,yBAAKV,UAAY,oBACdyB,EAAcK,OAAO,EACpB,kBAAC,EAAD,CAAU1B,OAAUqB,IACpB,wBAAIzB,UAAY,WAAhB,eAGJ,oCAAUwB,KAAKR,MAAMC,KAAKiB,wBAjB7B,6C,GApCWC,cCIZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTvB,MAAK,SAAA4B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf6B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MC1FjEC,IAASC,OACE,kBAAE,EAAF,MACRC,SAASC,eAAe,SDcpB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,eAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCzB,MAAMwB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAAAC,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMtD,MAAK,SAAA4B,GACjCA,EAAa2B,aAAavD,MAAK,WAC7BkB,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMtD,MAAK,WACjCkC,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCpC/BE,I","file":"static/js/main.a2e16c70.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card =({id,name,email})=>{\r\n\r\n    return(\r\n\r\n        <div className='  bg-light-green tc w6 dib    br3 pa2 ma2  grow bw shadow-5'>\r\n            <img alt='robots'  src={`https://robohash.org/${id}`} />\r\n            <div>\r\n                <h2 className='f3'> {name} </h2>\r\n                <p className='f4'>{email} </p>\r\n            </div>\r\n        </div>\r\n\r\n   );\r\n }\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist= ({robots})=>{\r\n    return(\r\n          robots.map ((user,i)=>{\r\n            return(\r\n            <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n            />\r\n            );\r\n          })\r\n    );\r\n\r\n}\r\n\r\nexport default Cardlist;\r\n","import React, {\r\n  Component\r\n} from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\n//import Searchbox from './Searchbox';\r\n//import {robots} from './robots';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [], //robots=robots in case we have file'robots.js'\r\n      searchfield: '',\r\n      date:new Date()\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        this.setState({\r\n          robots: users\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({\r\n      searchfield: event.target.value\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      robots,\r\n      searchfield\r\n    } = this.state;\r\n    const filteredrobot = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    });\r\n    return !robots.length ?\r\n       <h1 > loading < /h1>:\r\n       (\r\n         < div className = 'tc' >\r\n          <h1 className = 'f-subheadline lh-title' > ROBOFRIENDS < /h1>\r\n          <div className = 'pa3 mb3' >\r\n          <input className = ' tc pa3 ba b--blue bw2 bg-lightest-blue shadow-6'\r\n          type = 'search'\r\n          placeholder = 'Search Robots'\r\n          onChange = {this.onSearchChange}\r\n          />\r\n          </div>\r\n          <div className = 'h-800 bt bw2 pa3' >\r\n           { filteredrobot.length>0?\r\n              <Cardlist robots = {filteredrobot}/>:\r\n              <h1 className = 'f1 gold' > NOT FOUND </h1>\r\n\r\n          }\r\n          <h2>it's {this.state.date.toLocaleTimeString()}</h2>\r\n\r\n          </div>\r\n         </div>\r\n       );\r\n   }\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n           < App/>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}